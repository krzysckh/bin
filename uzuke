#!/bin/sh
#
# dependencies:
#  - mpv
#  - socat(1)
#  - curl

REAL_LIST="/tmp/_tmp_uzuke_slist"

STATUS="stopped"

# written for mpv
# if your music player of choice works with unix sockets
# change the code accordingly
SOCKET="/tmp/_uzuke_mpv_socket"
PLAYER="mpv --no-terminal --input-ipc-server=$SOCKET -"

PLAYER_PID=""

LINES="$(tput lines)"
COLUMNS="$(tput cols)"

MENU_OPT=""
MENU_OPT_N=

CUR_POS=0

_handle_socket() {
	case "$1" in
		playpause)
			echo "cycle pause" | socat - "$SOCKET"
			;;
		volup)
			echo "add volume 2" | socat - "$SOCKET"
			;;
		voldown)
			echo "add volume -2" | socat - "$SOCKET"
			;;
	esac
}

_prep_term() {
	printf '\033[?1049h'	# remember user screen
	printf '\033[?25l'	# hide cursor
	stty -icanon -echo
}

_quit() {
	[ "$STATUS" = "playing" ] && kill -9 "$PLAYER_PID"
	stty echo icanon
	printf '\033[?1049l'	# load user screen
	printf '\033[?25h'	# show cursor
	exit "$1"
}

_create_plist() {
	printf '' > "$REAL_LIST"	# clear file
	while read plistopt
	do
		case "$plistopt" in
			*"://"*)
				echo "$plistopt"
				;;
			"/"*)
				[ -d "$plistopt" ] && {
					find "$plistopt" -type f \
					| while read diropt
					do
						echo "$diropt"
					done
				} ||
					echo "$plistopt"
				;;
		esac
	done >> "$REAL_LIST"

	MENU_OPT_N="$(wc -l $REAL_LIST | awk '{print $1}')"

	echo "$MENU_OPT_N"
	cat "$REAL_LIST"

	exit 0
}

_prep_plist() {
	false
}

_menu() {
	case "$1" in
		up)
			[ "$CUR_POS" -eq 0 ] && return
			CUR_POS=$(($CUR_POS-1))
			;;
		down)
			[ "$CUR_POS" -eq $((MENU_OPT_N-1)) ] && return
			CUR_POS=$(($CUR_POS+1))
			;;
	esac

	_redraw
}

_statusline() {
	[ -z "$1" ] && return
	show="$(echo $1 | cut -b -$((COLUMNS-1)))"

	printf '\033[%s;0H' "$((LINES-2))"
	printf '\033[41m'		# red background
	printf '%*s\r%s ' "$COLUMNS" "" "$show" #"$((LINES-2))"
	printf '\033[0m'
}

_redraw() {
	i=0
	while read opt
	do
		printf '\033[%s;0H' "$((i+1))"
		opt="$(
			echo $opt \
				| sed 's!'$HOME'!~!g' \
				| cut -b -$((COLUMNS-2))
			)"

		if [ "$i" -eq "$CUR_POS" ]; then
			printf '\033[7m%s\033[0m' "$opt"
		else
			printf '%s' "$opt"
		fi
		
		i=$(($i+1))
	done < "$REAL_LIST"

	_statusline "$(_get_cur_opt)"
}

_get_cur_opt() {
	i=0

	while read opt
	do
		if [ "$i" -eq "$CUR_POS" ]; then
			printf '%s' "$opt"
			return
		fi

		i=$((i+1))
	done < "$REAL_LIST"
}

_handle_play() {
	[ -z "$1" ] && return

	[ "$STATUS" = "playing" ] && kill -9 "$PLAYER_PID"

	case "$1" in
		"search://"*)
			echo "not implemented"
			_quit 1
			;;
		"http://"*)
			curl -L "$1" 2>/dev/null | $PLAYER &
			PLAYER_PID="$!"
			;;
		"https://"*)
			curl -L "$1" 2>/dev/null | $PLAYER &
			PLAYER_PID="$!"
			;;
		*)
			$PLAYER < "$1" &
			PLAYER_PID="$!"
			;;
	esac

	STATUS="playing"
}

main() {
	[ -z "$1" ] && _quit 1
	[ "$1" = "create" ] && _create_plist

	MENU_OPT_N=$(head -n 1 "$1")
	sed 1d "$1" > "$REAL_LIST"

	_prep_term
	_redraw

	while key=$(dd ibs=1 count=1 2>/dev/null)
	do
		case "$key" in
			c)
				printf '\033[2J\033[H' # clear
				_redraw
				;;
			j)
				_menu down
				;;
			k)
				_menu up
				;;
			l)
				_handle_play "$(_get_cur_opt)"
				;;
			q)
				_quit 0
				;;
			' ')
				_handle_socket playpause
				;;
			'-')
				_handle_socket voldown
				;;
			'=')
				_handle_socket volup
				;;
		esac
	done
}

main "$@"
